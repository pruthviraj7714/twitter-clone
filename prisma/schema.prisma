// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int            @id @default(autoincrement())
  username                String         @unique
  name                    String
  email                   String         @unique
  password                String
  bio                     String?
  headerPhoto             String?
  photo                   String?
  posts                   Post[]         @relation()
  likes                   Like[]
  followers               Follow[]       @relation("UserFollowers")
  followings              Follow[]       @relation("UserFollowings")
  bookmarks               Bookmark[]
  comments                Comment[]
  notificationsAsUser     Notification[] @relation("NotificationUser")
  notificationsAsFollower Notification[] @relation("NotificationFollower")
  notificationsAsLiker    Notification[] @relation("NotificationLiker")
  notificationsAsReplier  Notification[] @relation("NotificationReplier")
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

model Follow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  follower    User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followingId Int
  following   User @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id            String         @id @default(uuid())
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  image         String?
  text          String
  video         String?
  likes         Like[]
  comments      Comment[]
  bookmark      Bookmark[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([userId])
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Comment {
  id            String         @id @default(uuid())
  text          String
  image         String?
  postId        String
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([postId])
}

model Bookmark {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Notification {
  id         Int              @id @default(autoincrement())
  postId     String?
  userId     Int
  likerId    Int?
  replierId  Int?
  followerId Int?
  commentId  String?
  createdAt  DateTime         @default(now())
  type       NotificationType
  read       Boolean          @default(false)

  user     User     @relation("NotificationUser", fields: [userId], references: [id], onDelete: Cascade)
  post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  follower User?    @relation("NotificationFollower", fields: [followerId], references: [id], onDelete: Cascade)
  liker    User?    @relation("NotificationLiker", fields: [likerId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  replier  User?    @relation("NotificationReplier", fields: [replierId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  LIKE
  FOLLOW
  REPLY
}
